generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model customers {
  id         BigInt    @id
  tenant_id  String?   @db.Uuid
  first_name String?
  last_name  String?
  email      String?
  phone      String?
  tags       String?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
  orders     orders[]
}

model order_items {
  id         BigInt    @id @default(autoincrement())
  order_id   BigInt?
  product_id BigInt?
  quantity   Int?
  price      Decimal?  @db.Decimal
  tenant_id  String?   @db.Uuid
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants    tenants?  @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([order_id, product_id], map: "order_items_order_product_unique")
  @@unique([order_id, product_id], map: "unique_order_product")
}

model orders {
  id               BigInt        @id
  tenant_id        String?       @db.Uuid
  customer_id      BigInt?
  order_number     Int?
  email            String?
  total_price      Decimal?      @db.Decimal
  currency         String?
  financial_status String?
  processed_at     DateTime?     @db.Timestamp(6)
  created_at       DateTime?     @db.Timestamp(6)
  updated_at       DateTime?     @db.Timestamp(6)
  order_items      order_items[]
  customers        customers?    @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants          tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model products {
  id           BigInt        @id
  tenant_id    String?       @db.Uuid
  title        String?
  vendor       String?
  product_type String?
  status       String?
  price        Decimal?      @db.Decimal
  created_at   DateTime?     @db.Timestamp(6)
  updated_at   DateTime?     @db.Timestamp(6)
  order_items  order_items[]
  tenants      tenants?      @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

model tenants {
  id                   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String
  api_key              String        @unique
  created_at           DateTime?     @default(now()) @db.Timestamp(6)
  email                String?
  password             String? 
  shopify_store_url    String?
  shopify_access_token String?
  last_synced_at       DateTime?     @db.Timestamptz(6)
  checkouts            checkouts[]
  customers            customers[]
  order_items          order_items[]
  orders               orders[]
  products             products[]
}

model checkouts {
  id          Int      @id @default(autoincrement())
  tenant_id   String?  @db.Uuid
  checkout_id String   @unique
  email       String?
  total_price String?
  created_at  DateTime @db.Timestamp(6)
  items       Json
  status      String   @default("abandoned") // can be "abandoned" or "completed"

  tenants     tenants? @relation(fields: [tenant_id], references: [id], onDelete: Cascade, onUpdate: Restrict)
}

